#!/bin/bash

#COLORS
#======
RED='\e[41m'
BLUE='\e[44m'
ORANGE='\e[46m'
NC='\e[0m'

# Service messages section
#==========================
ERRORMSG="$RED Wrong.$NC"
TRYAGAINMSG="$RED Enter desired option number and try again$NC"
CHANGECOLOR="Enter the six character RGB hex value for the desired color\nPlease do not prepend value with #\nPlease do not use any quotation marks"
CHANGEALPHA="Enter a number from 00 -> 100\n 00 representing full transparency\n 100 representing full opacity"

trap '[[ -e /tmp/rule_ops ]] && rm /tmp/rule_ops' EXIT SIGTERM
rule_ops()
{
# make a temporary file for options
	touch /tmp/rule_ops
	# choose window state
	window_state=$(echo -e "tiling\npseudo_tiled\nfloating\nfullscreen" | fzf-tmux -e --reverse --prompt='Select state for chosen window class >')
	[ -n "$window_state" ] && echo -e "state=$window_state" >> /tmp/rule_ops

	# choose if window  should be managed
		window_manage=$(echo -e "on\noff" | fzf-tmux -e --reverse --prompt='Manage= >')
		[ -n "$window_manage" ] && echo -e "manage=$window_manage" >> /tmp/rule_ops

	# choose window layer
		window_layer=$(echo -e "below\nnormal\nabove" | fzf-tmux -e --reverse --prompt='Layer= >')
		[ -n "$window_layer" ] && echo -e "layer=$window_layer" >> /tmp/rule_ops

	# choose window flags
		window_flags=$(echo -e "sticky=on\nprivate=on\nlocked=on\nurgent=on\n " | fzf-tmux -e -m --reverse --prompt='Choose window flags (tab to select multiple, choose empty if you want none) >')
		[ -n "$window_flags" ] && echo -e "$window_flags" >> /tmp/rule_ops

		window_desktop=$(echo -e "$(bspc query -D)\nAny" | fzf-tmux -e --reverse --prompt='Desktop= >')
		echo "$window_desktop" | {
		read desk
		if [ "$desk" = 'Any' ] ; then
			echo ""
		else
			[ -n "$desk" ] && echo -e "desktop=$desk" >> /tmp/rule_ops
		fi
	}
	# choose if window should be followed if it spawns on another desktop
		window_follow=$(echo -e "on\noff" | fzf-tmux -e --reverse --prompt='Follow= >')
		[ -n "$window_follow" ] && echo -e "follow=$window_follow" >> /tmp/rule_ops
}
add_rule()
{
	echo -e "Click on the window you wish to rule..."
	class=$(xprop | awk '/WM_CLASS/ {print substr($4, 1, length($4)-1)}' | awk NR==1 | cut -c 2-)
	echo ""
	echo -e "You have chosen $class."
	read -s -n1
	rule_ops
		rule_command="bspc rule -a $class $(cat /tmp/rule_ops | xargs)"
		$rule_command
		echo "your rule is $rule_command. Would you like to make this rule permanent? (y/N)"
		read -s -n1 yesno
		case $yesno in
			y|Y)
				echo -e "$rule_command" >> $HOME/.config/bspwm/bspwmrc
				echo -e "The command has been added to your bspwmrc. Press any key to continue."
				read -s -n1
				;;
			*)
				echo ""
				echo -e "Okay. Press any key to continue."
				read -s -n1
				;;
		esac
	rm /tmp/rule_ops
}
disable_rule()
{
		for rule in $(bspc rule -l | fzf-tmux -e -m  --reverse --prompt='Select rules to disable (use TAB to toggle selection) >' | awk '{print substr($1, 1, length($1)-2)}'); do
		bspc rule -r $rule
	done
}

rm_rule()
{
		for rule in $(bspc rule -l | fzf-tmux -e -m  --reverse --prompt='Select rules to remove (use TAB to toggle selection) >' | awk '{print substr($1, 1, length($1)-2)}'); do
		 	sed -i "/rule -a $rule/d" $HOME/.config/bspwm/bspwmrc
		 	sed -i "/rule --add $rule/d" $HOME/.config/bspwm/bspwmrc
	done
}

bspwm_cfg()
{
	for cfg in borderless_monocle gapless_monocle paddingless_monocle single_monocle history_aware_focus focus_by_distance focus_follows_pointer pointer_follows_focus ignore_ewmh_focus center_pseudo_tiled remove_disabled_monitors remove_unplugged_monitors merge_overlapping_monitors ; do
	echo "$cfg $(bspc config $cfg)" >> /tmp/bspwm-configs
	done
	toggles=$(cat /tmp/bspwm-configs | fzf-tmux -e -m  --reverse --prompt='Select configs to toggle (use TAB to toggle selection) >')
	for tog in $toggles; do
		toggle=$(bspc config $tog | \
    awk -vtoggle="true" \
    '{ if ($1 == "true") toggle="false"; print toggle }')

[[ ! "$toggle" == 'true' && ! "$toggle" == 'false' ]] && bspc config $tog true
bspc config $tog $toggle
	done
	rm /tmp/bspwm-configs
}

#COLORS MENU ###
window_title_color() {
	alpha_placeholder=`grep COLOR_TITLE_HACK ~/.limepanelrc | cut -c 20-21`
	sed -i -e "/COLOR_TITLE=/ s/#\w*/#$alpha_placeholder$color_wanted/" ~/.limepanelrc
	bspc wm -r
	colors_menu
}

main_color() {
	alpha_placeholder=`grep COLOR_FOCUSED_DESKTOP_FG ~/.limepanelrc | cut -c 28-29`
	sed -i -e "/COLOR_FOCUSED_DESKTOP_FG=/ s/#\w*/#$alpha_placeholder$color_wanted/" ~/.limepanelrc
	bspc wm -r
	colors_menu
}

inactive_desktop() {
	alpha_placeholder=`grep COLOR_DESKTOP_FG ~/.limepanelrc | cut -c 20-21`
	sed -i -e "/COLOR_DESKTOP_FG=/ s/#\w*/#$alpha_placeholder$color_wanted/" ~/.limepanelrc
	bspc wm -r
	colors_menu
}

panel_bkgrnd() {
	alpha_placeholder=`grep COLOR_DESKTOP_BG ~/.limepanelrc | cut -c 20-21`
	sed -i -e "/COLOR_DESKTOP_BG=/ s/#\w*/#$alpha_placeholder$color_wanted/" ~/.limepanelrc
	alpha_placeholder=`grep COLOR_FOCUSED_DESKTOP_BG ~/.limepanelrc | cut -c 28-29`
	sed -i -e "/COLOR_FOCUSED_DESKTOP_BG=/ s/#\w*/#$alpha_placeholder$color_wanted/" ~/.limepanelrc
	bspc wm -r
	colors_menu
}

focused_window_border() {
	sed -i -e "/focused_border_color/ s/#\w*/#$color_wanted/" ~/.config/bspwm/bspwmrc
	bspc wm -r
	window_colors_menu
}

normal_window_border() {
	sed -i -e "/normal_border_color/ s/#\w*/#$color_wanted" ~/.config/bspwm/bspwmrc
	bspc wm -r
	window_colors_menu
}

presel_feedback_color() {
	sed -i -e "/presel_feedback_color/ s/#\w*/#$color_wanted" ~/.config/bspwm/bspwmrc
	bspc wm -r
	window_colors_menu
}

#ALPHA MENU###
panel_alpha() {
	sed -i -e "/COLOR_DESKTOP_BG=/ s/#\w\w/#$alpha_wanted/" ~/.limepanelrc
	sed -i -e "/COLOR_FOCUSED_DESKTOP_BG=/ s/#\w\w/#$alpha_wanted/" ~/.limepanelrc
	bspc wm -r
	alpha_menu
}

active_windows_alpha() {
	if [ "$alpha_wanted" = "100" ]; then
		sed -i -e "/\bactive-opacity =/ s/=.*$/= 1;/" ~/.config/picom.conf
	elif [ "$alpa_wanted" = "0" ]; then
		sed -i -e "/\bactive-opacity =/ s/=.*$/= $alpha_wanted;/" ~/.config/picom.conf
	else
		sed -i -e "/\bactive-opacity =/ s/=./*$/= 0.$alpha_wanted;/" ~/.config/picom.conf
	fi
	killall compton
	compton -b
	alpha_menu
}

inactive_windows_alpha() {
	if [ "$alpha_wanted" = "100" ]; then
		sed -i -e "/inactive-opacity =/ s/=.*$/= 1;/" ~/.config/picom.conf
	elif [ "$alpa_wanted" = "0" ]; then
		sed -i -e "/inactive-opacity =/ s/=.*$/= $alpha_wanted;/" ~/.config/picom.conf
	else
		sed -i -e "/inactive-opacity =/ s/=./*$/= 0.$alpha_wanted;/" ~/.config/picom.conf
	fi
	killall compton
	compton -b
	alpha_menu
}

menu_alpha() {
	echo -e ""
		
	
}

#Functions for menu dialogs
#===========================

window_colors_menu() {
	while true ; do
	clear
    echo ""
    echo -e "     ::Window Borders Menu:: "
    echo -e " ┌─────────────────────────────┐"
    echo -e " │  1   Focused Window Border  │"
    echo -e " │  2   Normal Window Border   │"
    echo -e " │  3   Presel Feedback        │"    
    echo -e " └─────────────────────────────┘"
    echo -e "  Select an item    -   0  Exit "
    echo -e ""
	read -s -n1 choice
	case $choice in
		1)
			echo ""
			echo -e "$CHANGECOLOR"
			echo ""
			read color_wanted
			focused_window_border
			echo ""
			;;
		2)
		    echo ""
		    echo -e "$CHANGECOLOR"
		    echo ""
		    read color_wanted
		    normal_window_border
		    ;;
		3)
			echo ""
			echo -e "$CHANGECOLOR"
			echo ""
			read color_wanted
			presel_feedback_color
			echo ""
			;;
		0)
			colors_menu
			;;
		*)
			echo -e "$ERRORMSG$TRYAGAINMSG"
			read -s 
			clear
			;;
	esac
	done
}

colors_menu() {
	while true ; do
	clear
    echo ""
    echo -e "         ::Colors Menu:: "
    echo -e " ┌──────────────────────────────┐"
    echo -e " │     1   Window Title         │"
    echo -e " │     2   Main                 │"
    echo -e " │     3   Inactive Desktop     │"    
    echo -e " │     4   Panel Background     │"
    echo -e " │     5   Window Borders       │"
    echo -e " └──────────────────────────────┘"
    echo -e "  Select an item    -    0  Exit "
    echo ""
	read -s -n1 choice
	case $choice in
		1)
			echo ""
			echo -e "$CHANGECOLOR"
			echo ""
			read color_wanted
			window_title_color
			echo ""
			;;
		2)
		    echo ""
		    echo -e "$CHANGECOLOR"
		    echo ""
		    read color_wanted
		    main_color
		    ;;
		3)
			echo ""
			echo -e "$CHANGECOLOR"
			echo ""
			read color_wanted
			inactive_desktop
			echo ""
			;;
		4)
			echo ""
			echo -e "$CHANGECOLOR"
			echo ""
			read color_wanted
			panel_bkgrnd
			echo ""
			;;
		5)
			window_colors_menu
			;;
		0)
			main
			;;
		*)
			echo -e "$ERRORMSG$TRYAGAINMSG"
			read -s 
				clear
			;;
	esac
	done
}

alpha_menu() {
	while true ; do
	clear
    echo ""
    echo -e "   ::Transparency Menu:: "
    echo -e " ┌────────────────────────┐"
    echo -e " │  1   Panel             │"
    echo -e " │  2   Active Windows    │"
    echo -e " │  3   Inactive Windows  │"    
    echo -e " │  4   Menu              │"
    echo -e " │  5   Terminal          │"
    echo -e " └────────────────────────┘"
    echo -e " Select an item  -  0  Exit "
    echo ""
	read -s -n1 choice
	case $choice in
		1)
			echo ""
			echo -e "$CHANGEALPHA"
			echo -e "      Use FF for 100% or full opacity"
		    echo -e "  Use double digits for values less than 10"
		    echo -e " Ex: 01 instead of 1, 02 instead of 2, etc..."
			echo ""
			read alpha_wanted
			panel_alpha
			echo ""
			;;
		2)
		    echo ""
		    echo -e "$CHANGEALPHA"
		    echo -e "  Use double digits for values less than 10"
		    echo -e " Ex: 01 instead of 1, 02 instead of 2, etc..."
		    echo ""
		    read alpha_wanted
		    active_windows_alpha
		    echo ""
		    ;;
		3)
			echo ""
			echo -e "$CHANGEALPHA"
		    echo -e "  Use double digits for values less than 10"
		    echo -e " Ex: 01 instead of 1, 02 instead of 2, etc..."
			echo ""
			read alpha_wanted
			inactive_windows_alpha
			echo ""
			;;
		4)
			echo ""
			echo ""
			echo -e "  The menu window is tied to the\n   inactive window opacity level.\n\n Changing this setting will overwrite\n   ALL previous focus-exclude rules."
			echo ""
			echo -e "Press 0 for transparent and 1 for opaque"
			read alpha_wanted
			menu_alpha
			echo ""
			;;
		5)
			terminal_alpha
			;;
		0)
			main
			;;
		*)
			echo -e "$ERRORMSG$TRYAGAINMSG"
			read -s
				clear
			;;
	esac
	done
}

## THEME MENU
#============
themeMenu() {
	while true ; do
	clear
    echo ""
    echo -e "         ::Theme menu:: "
    echo -e "  ┌────────────────────────────┐"
    echo -e "  │      1   Colors            │"
    echo -e "  │      2   Transparency      │"
    echo -e "  │      3   Panel             │"    
    echo -e "  │      4   Rofi              │"
    echo -e "  │      5   Customize         │"
    echo -e "  └────────────────────────────┘"
    echo -e "   Select an item - 0 Main Menu "
    echo ""
    echo -e "            WARNING! "
	echo -e "Program expects the stock Manjaro\nenvironment applications and file\nlocations as found on new install"
    echo ""
	read -s -n1 choice
	case $choice in
		1)
			echo
			colors_menu
			echo ""
			;;
		2)
			echo
			alpha_menu
			echo ""
			;;
		3)
			echo
			panel_
			echo ""
			;;
		4)
			echo
			rofi_
			echo""
			;;
		5)
			echo
			customize_
			echo ""
			;;
		0)
			main
			;;
		*)
			echo -e "$ERRORMSG$TRYAGAINMSG"
			read -s 
			clear
			;;
	esac
	done
}

main()
{
    while true; do
    clear
    echo ""
    echo -e "                     ::Bspwm settings:: "
    echo -e " ┌────────────────────────────────────────────────────────────┐"
    echo -e " │    1   Add a rule                   2   Remove a rule      │"
    echo -e " │    3   Configure settings           4   Disable a rule     │"
    echo -e " │    5   Edit keybindings             6   Edit .profile      │"    
    echo -e " │    7   Edit autostart               8   Edit bspwmrc       │"
    echo -e " │    9   Theme settings               0   Exit               │"
    echo -e " └────────────────────────────────────────────────────────────┘"
    echo -e "                       Select an item "
    echo ""
    read -s -n1 choix
    case $choix in
        1)
            echo
            add_rule
            echo ""
            ;;
        2)
            echo
            rm_rule
            echo ""
            ;;
        3)
            echo
            bspwm_cfg
            echo ""
            ;;
        4)
            echo
            disable_rule
            echo ""
            ;;
        5)
            echo
            $EDITOR $HOME/.config/sxhkd/sxhkdrc
            echo ""
            ;;
        6)
            echo
            $EDITOR $HOME/.profile
            echo ""
            ;;
        7)
            echo
            $EDITOR $HOME/.config/bspwm/autostart
            echo ""
            ;;
        8)
            echo
            $EDITOR $HOME/.config/bspwm/bspwmrc
            echo ""
            ;;
        9)
        	echo
        	themeMenu
        	echo ""
        	;;
        0)
            clear && exit
            read
            ;;
        *)
            echo -e "$RED Wrong option $NC"
            echo "Wait and try again later..."
            echo ""
            sleep 1
            clear
            ;;
    esac
    done
}

main
